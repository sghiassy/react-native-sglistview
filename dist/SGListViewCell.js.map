{"version":3,"sources":["../lib/SGListViewCell.js"],"names":[],"mappings":";;AAAA;;;;AACA;;;;AAEA,IAAM,iBAAiB,gBAAM,WAAN,CAAkB;AAAA;;;;;;;AAMvC,aAAW;;;;AAIT,eAAW,iBAAU,OAAV,CAAkB;AAJpB,GAN4B;;AAavC,iBAbuC,6BAarB;AAChB,WAAO;AACL,kBAAY;AADP,KAAP;AAGD,GAjBsC;;;;;;AAsBvC,mBAtBuC,+BAsBnB;;;AAGlB,SAAK,cAAL,GAAsB;AACpB,aAAO,CADa,E;AAEpB,cAAQ,CAFY,EAAtB;AAID,GA7BsC;;AA+BvC,UA/BuC,oBA+B9B,GA/B8B,EA+BzB;;AAEZ,SAAK,cAAL,CAAoB,KAApB,GAA4B,IAAI,WAAJ,CAAgB,MAAhB,CAAuB,KAAnD;AACA,SAAK,cAAL,CAAoB,MAApB,GAA6B,IAAI,WAAJ,CAAgB,MAAhB,CAAuB,MAApD;AACD,GAnCsC;;;;;;AAwCvC,eAxCuC,yBAwCzB,UAxCyB,EAwCb;AACxB,QAAI,KAAK,KAAL,CAAW,UAAX,IAAyB,UAA7B,EAAyC;AACvC,a;AACD;;AAED,QAAI,cAAc,IAAlB,EAAwB;AACtB,WAAK,QAAL,CAAc,EAAE,YAAY,IAAd,EAAd;AACD,KAFD,MAEO;AACL,WAAK,QAAL,CAAc,EAAE,YAAY,KAAd,EAAd;AACD;AACF,GAlDsC;AAoDvC,QApDuC,oBAoD9B;AACP,QAAI,KAAK,KAAL,CAAW,UAAX,KAA0B,KAA9B,EAAqC;AACnC,aACE,mDAAM,OAAO,EAAE,OAAO,KAAK,cAAL,CAAoB,KAA7B,EAAoC,QAAQ,KAAK,cAAL,CAAoB,MAAhE,EAAb,GADF;AAGD;;AAED,WACE;AAAA;MAAA,EAAM,UAAU,KAAK,QAArB;MACG,KAAK,KAAL,CAAW;AADd,KADF;AAKD;AAhEsC,CAAlB,CAAvB;;AAmEA,OAAO,OAAP,GAAiB,cAAjB","file":"SGListViewCell.js","sourcesContent":["import React, { PropTypes } from 'react';\nimport { View } from 'react-native';\n\nconst SGListViewCell = React.createClass({\n\n  /**\n   * Object Lifecycle Methods\n   */\n\n  propTypes: {\n    /**\n     * This is the user's view as supplied by their datasource\n     */\n    usersView: PropTypes.element.isRequired,\n  },\n\n  getInitialState() {\n    return {\n      visibility: true,\n    };\n  },\n\n  /**\n   * View Lifecycle Methods\n   */\n  componentDidMount() {\n    // Don't want to trigger a render pass, so we're putting the view property\n    // data directly on the class\n    this.viewProperties = {\n      width: 0, // the view defaults to width of size 0\n      height: 0, // the view defaults to height of size 0\n    };\n  },\n\n  onLayout(evt) {\n    // When the cell has actually been layed out, record the rendered width & height\n    this.viewProperties.width = evt.nativeEvent.layout.width;\n    this.viewProperties.height = evt.nativeEvent.layout.height;\n  },\n\n  /**\n   * View Management Methods\n   */\n  setVisibility(visibility) {\n    if (this.state.visibility == visibility) {\n      return; // already have the passed in state, so return early\n    }\n\n    if (visibility == true) {\n      this.setState({ visibility: true });\n    } else {\n      this.setState({ visibility: false });\n    }\n  },\n\n  render() {\n    if (this.state.visibility === false) {\n      return (\n        <View style={{ width: this.viewProperties.width, height: this.viewProperties.height }} />\n      );\n    }\n\n    return (\n      <View onLayout={this.onLayout}>\n        {this.props.usersView}\n      </View>\n    );\n  },\n});\n\nmodule.exports = SGListViewCell;\n"]}