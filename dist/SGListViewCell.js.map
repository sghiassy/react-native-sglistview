{"version":3,"sources":["../lib/SGListViewCell.js"],"names":["SGListViewCell","createClass","propTypes","usersView","element","isRequired","getInitialState","visibility","componentDidMount","viewProperties","width","height","onLayout","evt","nativeEvent","layout","setVisibility","state","setState","render","props","module","exports"],"mappings":";;AAAA;;;;AACA;;;;AAEA,IAAMA,iBAAiB,gBAAMC,WAAN,CAAkB;AAAA;;;AAEvC;;;;AAIAC,aAAW;AACT;;;AAGAC,eAAW,iBAAUC,OAAV,CAAkBC;AAJpB,GAN4B;;AAavCC,iBAbuC,6BAarB;AAChB,WAAO;AACLC,kBAAY;AADP,KAAP;AAGD,GAjBsC;;;AAmBvC;;;AAGAC,mBAtBuC,+BAsBnB;AAClB;AACA;AACA,SAAKC,cAAL,GAAsB;AACpBC,aAAO,CADa,EACV;AACVC,cAAQ,CAFY,EAAtB;AAID,GA7BsC;AA+BvCC,UA/BuC,oBA+B9BC,GA/B8B,EA+BzB;AACZ;AACA,SAAKJ,cAAL,CAAoBC,KAApB,GAA4BG,IAAIC,WAAJ,CAAgBC,MAAhB,CAAuBL,KAAnD;AACA,SAAKD,cAAL,CAAoBE,MAApB,GAA6BE,IAAIC,WAAJ,CAAgBC,MAAhB,CAAuBJ,MAApD;AACD,GAnCsC;;;AAqCvC;;;AAGAK,eAxCuC,yBAwCzBT,UAxCyB,EAwCb;AACxB,QAAI,KAAKU,KAAL,CAAWV,UAAX,IAAyBA,UAA7B,EAAyC;AACvC,aADuC,CAC/B;AACT;;AAED,QAAIA,cAAc,IAAlB,EAAwB;AACtB,WAAKW,QAAL,CAAc,EAAEX,YAAY,IAAd,EAAd;AACD,KAFD,MAEO;AACL,WAAKW,QAAL,CAAc,EAAEX,YAAY,KAAd,EAAd;AACD;AACF,GAlDsC;AAoDvCY,QApDuC,oBAoD9B;AACP,QAAI,KAAKF,KAAL,CAAWV,UAAX,KAA0B,KAA9B,EAAqC;AACnC,aACE,mDAAM,OAAO,EAAEG,OAAO,KAAKD,cAAL,CAAoBC,KAA7B,EAAoCC,QAAQ,KAAKF,cAAL,CAAoBE,MAAhE,EAAb,GADF;AAGD;;AAED,WACE;AAAA;AAAA,QAAM,UAAU,KAAKC,QAArB;AACG,WAAKQ,KAAL,CAAWjB;AADd,KADF;AAKD;AAhEsC,CAAlB,CAAvB;;AAmEAkB,OAAOC,OAAP,GAAiBtB,cAAjB","file":"SGListViewCell.js","sourcesContent":["import React, { PropTypes } from 'react';\nimport { View } from 'react-native';\n\nconst SGListViewCell = React.createClass({\n\n  /**\n   * Object Lifecycle Methods\n   */\n\n  propTypes: {\n    /**\n     * This is the user's view as supplied by their datasource\n     */\n    usersView: PropTypes.element.isRequired,\n  },\n\n  getInitialState() {\n    return {\n      visibility: true,\n    };\n  },\n\n  /**\n   * View Lifecycle Methods\n   */\n  componentDidMount() {\n    // Don't want to trigger a render pass, so we're putting the view property\n    // data directly on the class\n    this.viewProperties = {\n      width: 0, // the view defaults to width of size 0\n      height: 0, // the view defaults to height of size 0\n    };\n  },\n\n  onLayout(evt) {\n    // When the cell has actually been layed out, record the rendered width & height\n    this.viewProperties.width = evt.nativeEvent.layout.width;\n    this.viewProperties.height = evt.nativeEvent.layout.height;\n  },\n\n  /**\n   * View Management Methods\n   */\n  setVisibility(visibility) {\n    if (this.state.visibility == visibility) {\n      return; // already have the passed in state, so return early\n    }\n\n    if (visibility == true) {\n      this.setState({ visibility: true });\n    } else {\n      this.setState({ visibility: false });\n    }\n  },\n\n  render() {\n    if (this.state.visibility === false) {\n      return (\n        <View style={{ width: this.viewProperties.width, height: this.viewProperties.height }} />\n      );\n    }\n\n    return (\n      <View onLayout={this.onLayout}>\n        {this.props.usersView}\n      </View>\n    );\n  },\n});\n\nmodule.exports = SGListViewCell;\n"]}